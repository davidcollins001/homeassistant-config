
# heating changed
  - alias: manual_heating_changed
    mode: restart
    trigger:
      - platform: state
        entity_id: input_boolean.heating
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.heating_temp_set
          value: >
            {% set state = states("input_boolean.heating") %}
            {% set temp_ent = "input_number.heating_{}_temp".format(state) %}
            {{ states(temp_ent) }}


# manual heating switched on
# NOTE: this runs in parallel with manual_heating_pwm_on, if pwm was used, so
#       that pwm switch gets switched off when timer expires
  - alias: manual_heating_on
    mode: restart
    trigger:
      - platform: state
        entity_id:
          - input_boolean.heating_boost
          - input_boolean.heating_pwm
        from: "off"
        to: "on"
        for: "00:00:4"
    condition:
      - condition: state
        entity_id: group.g_present
        state: home
      - condition: template
        value_template: >
          {% set ext_temp = states("sensor.openweathermap_temperature") | float %}
          {% set max_ext_temp = states("input_number.max_ext_temp") | int %}
          {{ ext_temp < max_ext_temp }}
      - condition: template
        value_template: >
          {% set members = expand(["group.g_heating"]) | selectattr("state", "eq", "on") %}
          {{ members | list | count | int == 1 }}
    action:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.heating
    - delay:
        minutes: >
          {% set entity = trigger.entity_id %}
          {% set ent_str = entity | replace("boolean", "number") + "_timer" %}
          {{ states(ent_str) | int }}
    - service: input_boolean.turn_off
      target:
        entity_id: "{{ trigger.entity_id }}"


# heating pwm - gets started/ended by manual_heating_on
  - alias: manual_heating_pwm_on
    mode: restart
    trigger:
      - platform: state
        entity_id: input_boolean.heating_pwm
        from: "off"
        to: "on"
        for: "00:00:4"
    condition:
      - condition: state
        entity_id: group.g_present
        state: home
      - condition: template
        value_template: >
          {% set ext_temp = states("sensor.openweathermap_temperature") | float %}
          {% set max_ext_temp = states("input_number.max_ext_temp") | int %}
          {{ ext_temp < max_ext_temp }}
      - condition: template
        value_template: >
          {% set members = expand(["group.g_heating"]) | selectattr("state", "eq", "on") %}
          {{ members | list | count | int == 1 }}
    variables:
      period: '{{ states("input_number.heating_pwm_period") | int }}'
      duty_cycle: '{{ states("input_number.heating_pwm_duty_cycle") | int }}'
      on_cycle: '{{ period * duty_cycle / 100}}'
      off_cycle: '{{ period * (100 - duty_cycle) / 100}}'
    action:
      repeat:
          while: "{{ states('input_boolean.heating_pwm') == 'on' }}"
          sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.heating
          - delay:
              minutes: '{{ on_cycle }}'
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.heating
          - delay:
              minutes: '{{ off_cycle }}'


# manual heating already on and another switched on
# NOTE: wait for slightly longer than manual_heating_on to wait until
#       heating_temp_set has been updated to check if current temp is higher
  - alias: heating_reset
    mode: restart
    trigger:
      - platform: state
        entity_id:
            - input_boolean.heating_boost
            - input_boolean.heating_pwm
        from: "off"
        to: "on"
        for: "00:00:5"
    condition:
      - condition: or
        conditions:
        - condition: state
          entity_id: group.g_present
          state: not_home
        - condition: template
          value_template: >
            {% set members = expand(['group.g_heating']) | selectattr('state', 'eq', 'on') %}
            {{ members | list | count | int > 1 }}
        - condition: template
          value_template: >
            {% set current = states("sensor.heating_temperature") | float %}
            {% set target = states("input_number.heating_temp_set") | int %}
            {{ current > target }}
        - condition: template
          value_template: >
            {% set ext_temp = states("sensor.openweathermap_temperature") | float %}
            {% set max_ext_temp = states("input_number.max_ext_temp") | int %}
            {{ ext_temp >= max_ext_temp }}
    action:
    - service: input_boolean.turn_off
      target:
        entity_id: "{{ trigger.entity_id }}"


# manual heating switched off
  - alias: manual_heating_off
    mode: restart
    trigger:
      - platform: state
        entity_id:
            - input_boolean.heating_boost
            - input_boolean.heating_pwm
        from: "on"
        to: "off"
    condition:
      - condition: template
        value_template: >
          {% set members = expand(["group.g_heating"]) | selectattr("state", "eq", "on") %}
          {{ members | list | count | int == 0 }}
    action:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.heating


# temp is below `on_temp` + heating switch on
  - alias: heating_temp_set
    mode: restart
    trigger:
      - platform: state
        entity_id: input_number.heating_temp_set
    action:
      - service_template: >
          {% set current = states("sensor.heating_temperature") | float %}
          {% set target = states("input_number.heating_temp_set") | int %}
          {% if current > target %}
              switch.turn_off
          {% elif current < target %}
              switch.turn_on
          {% endif %}
        entity_id: switch.heating_switch


# TODO: variables
# temp sensor changed
  - alias: sensor_temp_changed
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.heating_temperature
    condition:
      - condition: state
        entity_id: group.g_heating
        state: "on"
    variables:
      # period: '{{ states("input_number.heating_pwm_period") | int }}'
      _current: '{{ states("sensor.heating_temperature") | float }}'
    action:
      - choose:
        - conditions: >
            {% set current = states("sensor.heating_temperature") | float %}
            {% set target = states("input_number.heating_temp_set") | int %}
            {% set heating_switch = states("switch.heating_switch") %}
            {{ heating_switch == "on" and current > target }}
          sequence:
            - service: switch.turn_off
              target:
                entity_id: switch.heating_switch
        - conditions: >
            {% set current = states("sensor.heating_temperature") | float %}
            {% set target = states("input_number.heating_temp_set") | int %}
            {% set heating_switch = states("switch.heating_switch") %}
            {{ heating_switch == "off" and current < target }}
          sequence:
          - service: switch.turn_on
            target:
              entity_id: switch.heating_switch


# presence rules
  - alias: heating_presence_not_home
    mode: restart
    trigger:
      - platform: state
        entity_id: group.g_present
        from: "home"
        to: "not_home"
    condition:
      - condition: state
        entity_id: group.g_heating
        state: "on"
    action:
      - service: switch.turn_off
        target:
          entity_id: input_boolean.heating


# presence rules
  - alias: heating_presence_home
    mode: restart
    trigger:
      - platform: state
        entity_id: group.g_present
        from: "not_home"
        to: "home"
    condition:
      - condition: state
        entity_id: group.g_heating
        state: "on"
      - condition: state
        entity_id: switch.heating_switch
        state: "off"
    action:
      - service: switch.turn_on
        target:
          entity_id: input_boolean.heating
